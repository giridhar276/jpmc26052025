

https://github.com/giridhar276/jpmc26052025


name = "python programming"
print(name)
print("I love", name)
#slicing
#string[start:stop:step]
print(name[0])
print(name[1])
print(name[0:8])
print(name[8:14])
print(name[:])   # start = 0    stop=18   
print(name[::])  # start = 0    stop=18   step =1
print(name[0:18]) #default step is 1
print(name[0:18:1])
print(name[0:18:2])
print(name[-1])
print(name[-2])
print(name[-5:-1])
print(name[::-1])
#p    y     t     h    o     n         p    r    o    g   r   a  m   m   i    n   g
#0    1     2     3    4     5    6    7    8    9   10  11  12  13  14  15  16  17
# 
#                                                           -5  -4  -3  -2  -1
  






name = "python programming"
print(name.capitalize())
print(name.title())
print(name.replace("python","shell"))
#name = name.replace("python","shell") # this is permanent
print(name.split(" "))
print(name.upper())
print(name.lower())
print(name.swapcase())
print(name.isupper())
print(name.islower())
print(name.isalpha())
print(name.center(40))
print(name.center(40,"*"))
print(name.startswith("p"))
print(name.endswith("g"))
print(name.endswith("m"))





##############
# simple if 
############
if 1 < 2 :
    print("smaller")

if name.isupper():
    print("string is upper")
    print("inside if")
    print("still inside if")


if name.endswith("g"):
    print("String is lower")
    print("inside if")
##########
# if-else
###########
if name.isupper():
    print("string is upper")
    print("inside if")
else:
    print("string is lower")
    print("inside else")

################################
#if-elif-elif-elif-elif-elif-else
###################################
lang = input("Enter any language :")
if lang == "python":
    print("you are learning",lang)
elif lang == "java":
    print("you are learning",lang)
elif lang == "unix":
    print("you are learning", lang)
else:
    print("you are learning someother langauge")
    
    





aname = " python  "
print(len(aname))
print(aname.strip())
print(len(aname.strip()))  # remove whitespaces at both ends
print(len(aname.lstrip()))
print(len(aname.rstrip()))

### check for substring exists or not
name = "python programming"
print(name.find("ram"))  # if substring is found, it returns starting index
print(name.find("abc"))  # -1 if not found
if name.find("abc") !=  -1 :
    print("substring exists")
else:
    print("not found")


if "ram" in name:
    print("substring exists")
else:
    print("not found")
    
    
    
    
    
    
    
    
    
    
 ##########
 write a program to read some filename as input from keyboard and display the below output.
 
 if file is ending with .py ---> display "python file"

if file is ending with sh ------> display "shell file"

if file is ending with .java  ----> display "java file"

other than the above files ------> display "Unknown file"

 
 Enter any filename :   test.py
 Its python file
 
  Enter any filename :  example.java
 Its java file
 
 
 
 
 
filename = input("Enter any filename :")

if filename.endswith(".py"):
    print("python file")
elif filename.endswith(".java"):
    print("java file")
elif filename.endswith(".sh"):
    print("unix shell file")
else:
    print("unknown file")
    
    
    
    
    
    




# range(start,stop,step)
for i in range(1,11):
    print(i)

for i in range(1,11,2):
    print(i)

for i in range(2,11,2):
    print(i)

for i in range(10,1,-1):
    print(i)

for i in range(10,1,-2):
    print(i)

name = "python"
for char in name:
    print(char)

name = "python"
for char in name:
    print(char,end=" ")

for i in range(10,1,-2):
    print(i,end="  ")
    
    
    
##################################################################
    
write a program to convert the string to uppercase only if its length is more than 10 characters else display the same string.


sample output:
Enter a string: python programming
PYTHON PROGRAMMING


    
Enter a string: python 



text = input("Enter a string :")

if len(text) > 10:
    print(text.upper())
else:
    print(text)
    
##################################################################
write a program to reverse a string without using [::-1]

Enter any string:  python
nohtyp




text = input("Enter a string:")  #python
rev_text = ""
#print(text[::-1])

for char in text:
    rev_text = char + rev_text         
print("Reversed:",rev_text)

############### method2
for char in range(len(text),0,-1):    # range(6,0,-1)
    print(text[char-1],end="")      # text[6]
                             # text[4]




##################################################################

write a program to count no. of words in a sentence.

sample output:

Enter a sentence: I love python programming language
word count:  5




text = input("Enter a sentence:")

getcount = len(text.split(" "))
print("No. of words in sentence :", getcount)
##################################################################

write a program to print words longer than 4 characters in a sentence.



##################################################################

write a program to replace all the vowels in a string with *.

Enter a string: python
pyth*n




text = input("Enter  a string :")   #python
vowels = "aeiouAEIOU"
result = ""
for char in text:
    if char in vowels:
        result = result + "*"
    else:
        result = result + char   #pyth
print(result)


##################################################################

write a program to count how many uppercase , lowercase letters and digits are  in  a string


Enter a string: PyTHon108
Uppercase letters: 3
Lowercase letters: 3
Digits : 3



text = input("Enter a string :")
upper = 0
lower = 0
digits= 0
for char in text:
    if char.isupper():
        upper+=1
    elif char.islower():
        lower+=1
    elif char.isdigit():
        digits+=1
print("No. of upper chars:", upper)
print("No. of lower chars:", lower)
print("No. of digits:", digits)                      

##################################################################
    
write a program to read password from keyboard and valite the password
    

##################################################################

write a progarm to count character frequencies:


Enter a string :  hello

h : 1 time
e : 1 time
l : 2 times
o : 1 time


text = input("Enter any text:")

for char in set(text):
    print(char ,":", text.count(char))

##################################################################







alist.append(100)          # single value
print("After appeding :",alist)
alist.extend([91,29,53])   #multiple values
print("After extending:", alist)
alist.insert(0,10)         # list.insert(index,value)
print("After inserting :", alist)
alist.pop(1)               #list.pop(index)
print("After pop operation :",alist)
alist.pop()               #default is last index , value at last index is removed
print("After pop operation :",alist)
alist.remove(10)          # 10 in the value in the list
print("After removing :",alist)
# validate it first and then remove
if 200 in alist:
    alist.remove(200)
    print("After removing :",alist)

alist.reverse()          # reversing in place
print("After reversing :",alist)
alist.sort()             # ascending
print("Afters sorting :",alist)
alist.sort(reverse=True)
print("After sorting in descending order:",alist)







# iterating
for val in alist:
    print(val)

## reversing the list
for val in alist[::-1]:
    print(val)

# reversing the list
alist.reverse()
for val in alist:
    print(val)




#################################################################

write a a program to calculate the sum of all the values in the list without sum()

alist = [10,20,30,40]

sample output: 100


#################################################################

write a program to remove all the duplicates from the list

alist = [10,20,20,20,10,10,30]

output:
[10,20,30]

#################################################################


write a program to count how many times an element appears in the list


languages = ["python","c","python","unix","java","unix"]


python : 2 times
c      :  1 time
Unix   :  2 times
Java   :  1 time


#################################################################

wrrite a program to reverse a list without list.reverse() and [::-1]


#################################################################

write a program to square each number in a list

nums = [1,2,3,4]

output:
[1,2,9,16]


#################################################################

write a program to join a list of words into a single string

words = ["I","love","python","programming"]

output:
I love python programming


#################################################################

write a program to filter words longer than 4 letters

words = ["python","unix","java","oracle"]

output:
["python","oracle"]

#################################################################

Write a program to join corresponding strings from two lists.

first = ["Good", "Data", "Machine"]
second = ["Morning", "Science", "Learning"]

Output:
Good Morning
Data Science
Machine Learning

#################################################################

Write a program to get all unique words from a list of sentences.

sentences = ["hello world", "hello python", "data world"]

output:
["hello","world","python","data","world"]

#################################################################


Write a program to capitalize only the first letter of each word in a list 
    
#################################################################

data = ["Alice", "", None, "Bob", "Carol", "", None]

Write a program to replace all None or empty strings in a list with 'NA'.

output:
["Alice", 'NA', 'NA', "Bob", "Carol", 'NA', 'NA']
#################################################################


#################################################################
#####################list comprehension #####################
#################################################################


#Simple List Comprehension
# Square of numbers from 1 to 5
squares = [x**2 for x in range(1, 6)]
# Output: [1, 4, 9, 16, 25]



#With Condition (if)
# Even numbers from 1 to 10
evens = [x for x in range(1, 11) if x % 2 == 0]
# Output: [2, 4, 6, 8, 10]



#If-Else in List Comprehension
# Label even/odd
labels = ["Even" if x % 2 == 0 else "Odd" for x in range(1, 6)]
# Output: ['Odd', 'Even', 'Odd', 'Even', 'Odd']


#With String Filtering
# Words with length > 3
words = ["cat", "apple", "dog", "banana"]
long_words = [w for w in words if len(w) > 3]
# Output: ['apple', 'banana']


#Nested Loop
# Create pairs (i, j)
pairs = [(i, j) for i in range(2) for j in range(3)]
# Output: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]



#With strip() and case conversion
# Clean and uppercase names
names = [" Alice ", "Bob", " carol "]
cleaned = [name.strip().upper() for name in names]
# Output: ['ALICE', 'BOB', 'CAROL']



#List of Words Starting with Vowel
words = ["apple", "banana", "orange", "grape", "umbrella"]
vowels = [w for w in words if w[0].lower() in 'aeiou']
# Output: ['apple', 'orange', 'umbrella']








####### tuple methods ####################

atup = (10,20,30,10,10,10,10,30,30)

print(atup.count(10))

print(atup.index(30))








book = {"chap1":10 ,"chap2":20 ,"chap3":30,"chap1":100}
print(book)
## display individual value
print(book["chap1"])
print(book["chap2"])

# add new key-value pair
book["chap4"] = 40
book["chap5"] = 50
print(book)

## keys
print(book.keys())

for k in book.keys():   # will display all th keys line by line
    print(k)

# values
print(book.values())

for v in book.values():
    print(v)

### items
print(book.items())

for k,v in book.items():
    print("Key :", k)
    print("value:", v)
 
 
 
 
 

## removing key-value from dictionary
book.pop("chap1")
print(book)


## last key value will be removed
book.popitem()
print(book)
book.popitem()
print(book)
book.popitem()
print(book)







## combining two dictionaries
book = {"chap1":10 ,"chap2":20 ,"chap3":30,"chap1":100}
newbook = {"chap8":80,"chap9":90}
finalbook = {**newbook,**book}
print(finalbook)

book.update(newbook)
print("updated dictionary :",book)  # book will be updated

# concatenating lists and strings
print([10,20] + [30,4])
print("hello" + "python")
print((10,20) + (30,40))








data = {
    "glossary": {
        "title": "example glossary",
		"GlossDiv": {
            "title": "S",
			"GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
                    },
					"GlossSee": "markup"
                }
            }
        }
    }
}


#print(data)
print(type(data))



#Standard Generalized Markup Language
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossTerm'])


# XML
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossDef']['GlossSeeAlso'][1])





####################################################################



colors = [
{
"colors": "red",
"values": "#f00"
},
{
"colors": "green",
"values": "#0f0"
},
{
"colors": "blue",
"values": "#00f"
},
{
"colors": "cyan",
"values": "#0ff"
},
{
"colors": "magenta",
"values": "#f0f"
},
{
"colors": "yellow",
"values": "#ff0"
},
{
"colors": "black",
"values": "#000"
}
]

write a program to display all the colors and its values.

sample output :

red #f00
green #0f0
yellow  #ff0
magenta #f0f
..
..
..



for i in colors:
    print(i['colors'])
    print(i['values'])

####################################################################

Write a program to display all employee names and their departments.

employees = {
    "E001": {"name": "Alice", "department": "Finance"},
    "E002": {"name": "Bob", "department": "IT"},
    "E003": {"name": "Charlie", "department": "HR"}
}



for key,value in employees.items():
    print("Name :",value['name'] )
    print("Department :",value['department'])
    print("-------------")


####################################################################

Write a program to print all product names and prices.

products = [
    {"id": 101, "name": "Laptop", "price": 75000},
    {"id": 102, "name": "Mobile", "price": 25000},
    {"id": 103, "name": "Tablet", "price": 15000}
]



for item in products :
    print("Item :",item['name'])
    print("Price:",item['price'])

####################################################################

Write a program to show student names with grades.

students = [
    {"id": 1, "name": "John", "marks": {"math": 80, "science": 75}},
    {"id": 2, "name": "Jane", "marks": {"math": 90, "science": 85}}
]




for student in students:  # each student is a list
    print(student['name'])
    print("-----------")
    for subject,marks in student['marks'].items():
        print(subject, marks)
    print()
    
    
####################################################################

Write a program to print team names and player names.

teams = {
    "TeamA": [
        {"name": "Alice", "role": "Batsman"},
        {"name": "Bob", "role": "Bowler"}
    ],
    "TeamB": [
        {"name": "Charlie", "role": "Allrounder"},
        {"name": "Dave", "role": "Wicketkeeper"}
    ]
}




for team,playerinfo in teams.items():
    print("Team name :",team)
    print("------------")
    for player in playerinfo:
        print(player['name'])
        
        
        
####################################################################

Write a program to tag each VM as 'Running' or 'Stopped' based on status.

infra = {
    "vm1": {"location": "Mumbai", "status": "Running"},
    "vm2": {"location": "Delhi", "status": "Stopped"},
    "vm3": {"location": "Hyderabad", "status": "Running"}
}


output:
vm1 : Running
vm2 : Stopped


for key,value in infra.items():
    print(key)
    print("------")
    print("Status :",value['status'])

####################################################################

Write a program to deposit 1000 into all customer accounts and display the dictionary


customers = {
    "C001": {"name": "Alice", "balance": 5000},
    "C002": {"name": "Bob", "balance": 12000},
    "C003": {"name": "Charlie", "balance": 3000}
}




for key,value in customers.items():
    customers[key]['balance']+=1000

print(customers)
####################################################################
Write a program to list customers with balance over ₹10,000.


customers = {
    "C001": {"name": "Alice", "balance": 5000},
    "C002": {"name": "Bob", "balance": 12000},
    "C003": {"name": "Charlie", "balance": 3000}
}



for key,value in customers.items():
    if value['balance'] > 10000:
        print(value['name'])

######################################

write a program to read the below dictionary and display the expected output

info = {
"id": "0001",
"type": "donut",
"name": "Cake",
"image":
{
"url": "images/0001.jpg",
"width": 200,
"height": 200
},
"thumbnail":
{
"url": "images/thumbnails/0001.jpg",
"width": 32,
"height": 32
}
}


sample output:

ID              : 0001
TYPE            : donut
NAME            : Cake
IMAGE URL       :"images/0001.jpg
IMAGE WIDTH     : 200
IMAGE HEIGHT    : 200
THUMBNAIL URL   : "images/thumbnails/0001.jpg"
THUMBNAIL WIDTH : 32
THUMBNAIL HEIGHT:  32




for key,value in info.items():
    if isinstance(value,str):
        print(key.upper().ljust(20),":",value)
    elif isinstance(value,dict):
        for skey,svalue in value.items():
            finalkey = key + " " + skey
            print(finalkey.ljust(20), ":",svalue)
            
            
            
###########################################


data = {
    'Sales': {
        'North': {
            'Alice': 'Manager',
            'Bob': 'Sales Executive',
            'Eve': 'Sales Coordinator',
            'John': 'Account Manager'
        },
        'South': {
            'Charlie': 'Sales Executive',
            'Grace': 'Regional Sales Manager',
            'Mallory': 'Business Development Associate'
        },
        'West': {
            'Oscar': 'Sales Executive',
            'Peggy': 'Account Executive',
            'Victor': 'Territory Sales Manager'
        }
    },
    'Marketing': {
        'Digital': {
            'David': 'SEO Specialist',
            'Hannah': 'Content Strategist',
            'Irene': 'Social Media Manager'
        },
        'Offline': {
            'Eve': 'Event Coordinator',
            'Jake': 'Brand Manager',
            'Liam': 'Public Relations Specialist'
        },
        'Research': {
            'Mia': 'Market Research Analyst',
            'Noah': 'Customer Insights Manager'
        }
    },
    'IT': {
        'Infrastructure': {
            'Quinn': 'Network Engineer',
            'Riley': 'System Administrator',
            'Sam': 'Cloud Architect'
        },
        'Development': {
            'Tina': 'Software Engineer',
            'Uma': 'Backend Developer',
            'Walter': 'Full Stack Developer'
        }
    },
    'HR': {
        'Recruitment': {
            'Yara': 'Recruitment Specialist',
            'Zane': 'Talent Acquisition Manager',
            'Nina': 'HR Coordinator'
        },
        'Employee Relations': {
            'Oliver': 'Employee Relations Specialist',
            'Sophia': 'HR Business Partner'
        }
    },
    'Finance': {
        'Accounting': {
            'Xander': 'Accountant',
            'Yvette': 'Accounts Payable Specialist',
            'Zara': 'Financial Analyst'
        },
        'Audit': {
            'Luna': 'Internal Auditor',
            'Mason': 'Compliance Officer'
        }
    }
}


write a program to display the below output:


Sales
-----
North
South
West


Marketing
--------
Digital
Offline
Research


IT
---
Infrasturcture
Development

HR
---
Recruitment
Employee Relations











### set operations 
aset = {10,10,20,30,30,30,30}
print(aset)
bset = {30,30,30,30,40,40,40,50}
print(bset)

print("Unique values:",aset.union(bset))
print("Common values :", aset.intersection(bset))
print("difference    :",aset.difference(bset))


aset.add(10)
print(aset)
aset.add(50)
print(aset)









fobj = open("customers.txt","w")

fobj.write("python programming\n")  # single string
fobj.write("unix shell\n")

fobj.writelines(["java\n","unix\n","oracle\n"])  # multiple strings

for val in range(1,10):
    fobj.write(str(val) + "\n")
fobj.close()





# context manager
# if any line starts with keyword with ... we call that context maanger
# Advantage: if will be closed automatically.

# pythonic way
with  open("dataset.txt","w") as fobj:
    fobj.write("python programming\n")  # single string
    fobj.write("unix shell\n")

    fobj.writelines(["java\n","unix\n","oracle\n"])  # multiple strings

    for val in range(1,100):
        fobj.write(str(val) + "\n")





languages.txt
-----------------
python,101
linux,102
java,103
shell,104
dotnet,105







# method1
# reading the file line by line
# fobj acts like an handler or cursor for navigating
with open("languages.txt","r") as fobj:
    for line in fobj:
        print(line.strip())

#method2
with open("languages.txt","r") as fobj:
    print(fobj.readlines())

with open("languages.txt","r") as fobj:
    for line in fobj.readlines():
        print(line)

# method3 : just like ctrl+a   ctrl+c  ctrcl+v
# genrally not suggested for bigger files
with open("languages.txt","r") as fobj:
    print(fobj.read())    # fobj.read() -----> string

#method4
import csv
with open("languages.txt","r") as fobj:
    reader = csv.reader(fobj) # converting file object to csv object
    for line in reader:
        print(line)  



################################################################################################

write a proram to read empinfo.csv file and display the data lien by line


################################################################################################

write a proram to read empinfo.csv file  and dipslay workclass and education columns only.

################################################################################################

write a proram to read empinfo.csv file and display all the UNIQUE workclasses.

 State-gov
 Self-emp-not-inc
 Private
 Federal-gov



import csv
workset = set()
with open("empinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    #processing
    for line in reader:
        workset.add(line[1])
    # displaying output
    for work in workset:
        print(work)

import csv
workdict = dict()
with open("empinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    #processing
    for line in reader:
        workdict[line[1]] = 1       # { "private":1 ,"public":1}
    # displaying output
    for work in workdict:
        print(work)


################################################################################################

write a proram to read empinfo.csv file and display the below output.

Total Male count   : xxxx
Total female count : xx



import csv
mcount =0
fcount =0
with open("empinfo.csv","r") as fobj:
    reader = csv.reader(fobj)
    #processing
    for line in reader:
        if "Male" in line:
            mcount= mcount +1
        elif "Female" in line:
            fcount = fcount + 1
    print("Total male count :", mcount)
    print("Total female count :",fcount)





################################################################################################

write a proram to read empinfo.csv and replace the lines containing  United-States with USA and write the output to 29_May_2025.csv

################################################################################################

with open("empinfo.csv","r") as fobj:   # read
    with open("29_May_2025.csv","w") as fw:   # write
        for line in fobj:
            line = line.strip()
            line  = line.replace(" United-States","USA")
            fw.write(line + "\n")







# method1
## all the methods are imported to your programspace
import math 
print(math.log(1))
print(math.tan(1))

#method2  importing with alias name
import math as m
print(m.log(2))
print(m.cos(1))

import matplotlib.pyplot as plt     #pip install matplotlib
plt.plot([10,20],[20,30])
plt.show()

#method3 - importing required methods only
from math import log,tan,cos 
print(log(4))
print(tan(1))





step1: Creating virtual enviornment
-------------------------------
pip -m venv myenv1

step2: activate your enviornment
----------------------------------
 .\myenv1\Scripts\activate  ( windows )
 source ./myenv1/bin/activate ( Linux or mac)

step3: deactivate 
-------------------
deactivate 







################################### frequently used builtin libraries #############################

os         : os level activities
math       : mathematical operations
sys        :  sys and python config data
shutil     : copy,move, rmtree  etc
urllib     : read the web, downloading the files
logging    : logging all the events
smtplib    : sending the mails
ftplib     : performing ftp operations
sysconfig  :  sys and python config data
zipfile    : create/extract the zip files
rarfile    : create/extract the rar files
cryptopgraphy : encrypting and decrypting the data or files
tarfile    : create/extract the tar files
filecmp    : comparing files or directories
sqlite3    : python default database
csv        : reading/writing csv files
xml        : reading/writing xml files
calendar   : display month,year calendar info
datetime   : working with date n time
time       : working with date n time
fractions  : working with decimal values
glob       : display all the files
heapq      : more of array operations ( getting largest among list )
subprocess : executing system commands in python (  subprocess.getoutput("ls -ltr")
pdb        : python debugger
platform   : platform information
random     : random operations ( shuffling , random digit ... )
re         : grep + awk + sed
socket     : networking programming
stat       : stats of the file
statistics : basic statistics
pathlib	   : Object-oriented file path operations
time	     : Delays, timestamps, performance checks
logging	   : Logging for scripts/apps (replace print for real apps)
argparse	 : Command-line interface (CLI) argument parsing
configparser : 	Read/write .ini config files
json	     :Serialize/deserialize JSON (common in APIs)
uuid	     : Generate unique IDs (useful in files, databases)
statistics	:Basic stats: mean, median, stdev
random	    :Random number generation, sampling
collections	:Specialized containers (defaultdict, Counter, namedtuple)
traceback	   :Print/format exception tracebacks
warnings	   :Raise and handle warnings







######################################################################################
write a program to display all the files and directories from current directory line by line


import os
try:
    files = os.listdir()
    for file in files:
        print(file)
except Exception as err :
    print(err)



######################################################################################

write a progarm to display all the files and directories from C:




#write a progarm to display all the files and directories from C:
import os
try:
    files = os.listdir("C:\\Users\\Public")
    for file in files:
        print(file)
except Exception as error :
    print(error)




#write a progarm to display all the files and directories from C:
import os
try:
    files = os.listdir("C:\\Users\\Public\\abc")
    for file in files:
        print(file)
except TypeError as err:
    print("Invalid operation")
except ValueError as err:
    print("Invalid input")
except (IndexError,KeyError) as err:
    print("Invalid index or key")
except FileNotFoundError as err:
    print("file or directory is not found",err)
except Exception as error :
    print(error)




######################################################################################

write a program to delete all the .xlsx files from current directory


import os
### delete xlsx files only
try:
    files = os.listdir()
    for file in files:
        if file.endswith("xlsx") and os.path.isfile(file):
            os.remove(file)
            print(file,"is deleted")
except Exception as err:
    print(err)

######################################################################################

write a program to display all the files that are ending with .csv files from current directory


######################################################################################

write a script to create 10 directories in the current directory as below.

dir1
dir2
dir3
dir4
..
..
dir10



import os

os.mkdir("testdir")

try:
    for value in range(1,11):
        dirname = "dir" + str(value)
        os.mkdir(dirname)
except Exception as err:
    print(err)

######################################################################################

write a script to perform the below operations :

1. display current working directory
2. display login name
3. display all environment variables
4. display today's date ( timestamp )
5. display May months calendar
6. display all .py files and its size in bytes
7. display the modified time of employees.csv file
8. display current process id



'''
write a script to perform the below operations :
1. display current working directory
2. display login name
3. display all environment variables
4. display today's date ( timestamp )
5. display May months calendar
6. display all .py files and its size in bytes
7. display the modified time of employees.csv file
8. display current process id
'''

import os
import datetime
import calendar
try:
    pwd = os.getcwd()
    print("Current working directory :", pwd)
    print("loginame :", os.getlogin())
    print("display all enviornment variables:")
    for key,value in os.environ.items():
        print(key)
        print(value)
        print("------")
    print(datetime.datetime.now())
    print(calendar.month(2025,5))
    print(calendar.calendar(2025))


    for file in os.listdir():
        if file.endswith(".py"):
            print(file.ljust(20), os.path.getsize(file),"bytes")

    print(os.getpid())
except Exception as err:
    print(err)




######################################################################################
write a script to display the below information 

1. CPU percentage
2. Memory info ( total memory, available, used)
3. process info
4. disk partitions
5. network statistics
4. platform details ( like OS name , model , python version)
5. boot time of your system
6. IP Address of your system
7. hostname of the system



import psutil
import platform
print(psutil.cpu_percent(interval=1))
print(psutil.virtual_memory())
print(psutil.disk_partitions())
print(psutil.net_connections())
print(platform.platform())
print(platform.python_version())
######################################################################################





# fixed arguments
def display(a,b):
    print(a,b)
display(10,20)


# default arguments

def display(a = 0,b = 0,c = 0,d = 0):
    print(a,b,c,d)
display()
display(10)
display(10,20)
display(10,20,30)
display(10,20,30,40)

#variable length args
def display(*args):
    print(args)
    for val in args:
        print(val)
display(10,20,30,40,50,56,54,5,43,56,43,5,43,67,43,6,34,657,43,7434367,43,46,"python")





# fixed arguments
def display(a,b):  # single liner function
    c = a + b
    return c
total = display(10,20)
print(total)



# lambda function
# lambda is just the replacement of single liner function for faster execution
#syntax
#functioname = lambda variables : expression
display = lambda a,b : a + b
total = display(10,20)
print(total)




display = lambda *data : sum(data)
total = display(10,20,40,50,60,60)
print(total)

display = lambda a,b,c : a + b + c
total = display("python","programming","langauge")
print(total)


